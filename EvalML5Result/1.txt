 |- let rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z)  in (max (9 :: (2 :: (3 :: [])))) evalto 9 by E-LetRec{
     max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- max (9 :: (2 :: (3 :: []))) evalto 9 by E-AppRec{
          max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- max evalto () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] by E-Var{};
          max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- 9 :: (2 :: (3 :: [])) evalto 9 :: (2 :: (3 :: [])) by E-Cons {
               max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- 9 evalto 9 by E-Int{};
               max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- 2 :: (3 :: []) evalto 2 :: (3 :: []) by E-Cons {
                    max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- 2 evalto 2 by E-Int{};
                    max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- 3 :: [] evalto 3 :: [] by E-Cons {
                         max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- 3 evalto 3 by E-Int{};
                         max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ] |- [] evalto [] by E-Nil{};
                    };
               };
          };
          max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ],l = (9 :: (2 :: (3 :: []))) |- match l with (x :: []) -> x |  (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z)  evalto 9 by E-MatchM2{
               max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ],l = (9 :: (2 :: (3 :: []))) |- l evalto (9 :: (2 :: (3 :: []))) by E-Var{};
               x :: [] matches 9 :: (2 :: (3 :: [])) when (x = 9,[] = (2 :: (3 :: []))) by M-Cons{
                    x matches 9 when (x = 9) by M-Var{};
                    [] matches (2 :: (3 :: [])) when ([] = (2 :: (3 :: []))) by M-Var{};
};
               max = () [rec max = fun l -> match l with  (x :: []) -> x | (x :: y :: z) -> if (x < y) then (max y :: z) else (max x :: z) ],l = (9 :: (2 :: (3 :: []))),x = 9,[] = (2 :: (3 :: [])) |- x evalto 9 by E-Var{};
};
     };
};