 |- let k = (fun x -> (fun y -> x)) in (((k 3) true) :: ((k (1 :: [])) 3)) : int list by T-Let{
      |- fun x -> (fun y -> x) :  (int list -> (int -> int list))  by T-Abs{
          x : int list |- fun y -> x :  (int -> int list)  by T-Abs{
               x : int list,y : int |- x : int list by T-Var{};
          };
     };
     k : (int list -> (int -> int list)) |- ((k 3) true) :: ((k (1 :: [])) 3) :  int list  by T-Cons{
          k : (int -> (bool -> int)) |- (k 3) true :  int  by T-App{
               k : (int -> (bool -> int)) |- k 3 :  (bool -> int)  by T-App{
                    k : (int -> (bool -> int)) |- k : (int -> (bool -> int)) by T-Var{};
                    k : (int -> (bool -> int)) |- 3 : int by T-Int{};
               };
               k : (int -> (bool -> int)) |- true : bool by T-Bool{};
          };
          k : (int list -> (int -> int list)) |- (k (1 :: [])) 3 :  int list  by T-App{
               k : (int list -> (int -> int list)) |- k (1 :: []) :  (int -> int list)  by T-App{
                    k : (int list -> (int -> int list)) |- k : (int list -> (int -> int list)) by T-Var{};
                    k : (int list -> (int -> int list)) |- 1 :: [] :  int list  by T-Cons{
                         k : (int list -> (int -> int list)) |- 1 : int by T-Int{};
                         k : (int list -> (int -> int list)) |- [] :  int list  by T-Nil{};
                    };
               };
               k : (int list -> (int -> int list)) |- 3 : int by T-Int{};
          };
     };
};