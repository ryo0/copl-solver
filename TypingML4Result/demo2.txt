 |- let s = (fun f -> (fun g -> (fun x -> ((f x) (g x))))) in s : ((bool -> (bool -> bool)) -> ((bool -> bool) -> (bool -> bool))) by T-Let{
      |-fun f -> (fun g -> (fun x -> ((f x) (g x)))) :  ((bool -> (bool -> bool)) -> ((bool -> bool) -> (bool -> bool)))  by T-Fun{
          f : (bool -> (bool -> bool)) |-fun g -> (fun x -> ((f x) (g x))) :  ((bool -> bool) -> (bool -> bool))  by T-Fun{
               f : (bool -> (bool -> bool)),g : (bool -> bool) |-fun x -> ((f x) (g x)) :  (bool -> bool)  by T-Fun{
                    f : (bool -> (bool -> bool)),g : (bool -> bool),x : bool |- (f x) (g x) :  bool  by T-App{
                         f : (bool -> (bool -> bool)),g : (bool -> bool),x : bool |- f x :  (bool -> bool)  by T-App{
                              f : (bool -> (bool -> bool)),g : (bool -> bool),x : bool |- f : (bool -> (bool -> bool)) by T-Var{};
                              f : (bool -> (bool -> bool)),g : (bool -> bool),x : bool |- x : bool by T-Var{};
                         };
                         f : (bool -> (bool -> bool)),g : (bool -> bool),x : bool |- g x :  bool  by T-App{
                              f : (bool -> (bool -> bool)),g : (bool -> bool),x : bool |- g : (bool -> bool) by T-Var{};
                              f : (bool -> (bool -> bool)),g : (bool -> bool),x : bool |- x : bool by T-Var{};
                         };
                    };
               };
          };
     };
     s : ((bool -> (bool -> bool)) -> ((bool -> bool) -> (bool -> bool))) |- s : ((bool -> (bool -> bool)) -> ((bool -> bool) -> (bool -> bool))) by T-Var{};
};