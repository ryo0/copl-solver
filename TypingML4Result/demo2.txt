 |- let s = (fun f -> (fun g -> (fun x -> ((f x) (g x))))) in s : ((int -> (int -> int)) -> ((int -> int) -> (int -> int))) by T-Let{
      |-fun f -> (fun g -> (fun x -> ((f x) (g x)))) :  ((int -> (int -> int)) -> ((int -> int) -> (int -> int)))  by T-Fun{
          f : (int -> (int -> int)) |-fun g -> (fun x -> ((f x) (g x))) :  ((int -> int) -> (int -> int))  by T-Fun{
               f : (int -> (int -> int)),g : (int -> int) |-fun x -> ((f x) (g x)) :  (int -> int)  by T-Fun{
                    f : (int -> (int -> int)),g : (int -> int),x : int |- (f x) (g x) :  int  by T-App{
                         f : (int -> (int -> int)),g : (int -> int),x : int |- f x :  (int -> int)  by T-App{
                              f : (int -> (int -> int)),g : (int -> int),x : int |- f : (int -> (int -> int)) by T-Var{};
                              f : (int -> (int -> int)),g : (int -> int),x : int |- x : int by T-Var{};
                         };
                         f : (int -> (int -> int)),g : (int -> int),x : int |- g x :  int  by T-App{
                              f : (int -> (int -> int)),g : (int -> int),x : int |- g : (int -> int) by T-Var{};
                              f : (int -> (int -> int)),g : (int -> int),x : int |- x : int by T-Var{};
                         };
                    };
               };
          };
     };
     s : ((int -> (int -> int)) -> ((int -> int) -> (int -> int))) |- s : ((int -> (int -> int)) -> ((int -> int) -> (int -> int))) by T-Var{};
};