 |- let rec length = fun l -> match l with  [] -> 0 | x :: y -> (1 + (length y))  in length :  (int list -> int)  by T-LetRec{
     length : (bool list -> int),l : bool list |- match l with [] -> 0 | x :: y -> (1 + (length y)) :  int  by T-Match{
          length : (bool list -> int),l : bool list |- l : bool list by T-Var{};
          length : (bool list -> int),l : bool list |- 0 : int by T-Int{};
          length : (bool list -> int),l : bool list,x : bool,y : bool list |- 1 + (length y) : int by T-Plus{
               length : (bool list -> int),l : bool list,x : bool,y : bool list |- 1 : int by T-Int{};
               length : (bool list -> int),l : bool list,x : bool,y : bool list |- length y :  int  by T-App{
                    length : (bool list -> int),l : bool list,x : bool,y : bool list |- length : (bool list -> int) by T-Var{};
                    length : (bool list -> int),l : bool list,x : bool,y : bool list |- y : bool list by T-Var{};
               };
          };
     };
     length : (bool list -> int) |- length : (int list -> int) by T-Var{};
};