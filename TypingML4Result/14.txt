 |- let k = (fun x -> (fun y -> x)) in ((k (1 :: [])) 3) : int list by T-Let{
      |-fun x -> (fun y -> x) :  ('x41 -> ('x42 -> 'x41))  by T-Fun{
          x : 'x41 |-fun y -> x :  ('x43 -> 'x41)  by T-Fun{
               x : 'x41,y : 'x43 |- x : 'x41 by T-Var{};
          };
     };
     k : ('x41 -> ('x42 -> 'x41)) |- (k (1 :: [])) 3 :  int list  by T-App{
          k : ('x41 -> ('x42 -> 'x41)) |- k (1 :: []) :  ('x42 -> int list)  by T-App{
               k : ('x41 -> ('x42 -> 'x41)) |- k : ('x41 -> ('x42 -> 'x41)) by T-Var{};
               k : ('x41 -> ('x42 -> 'x41)) |- 1 :: [] :  int list  by T-Cons{
                    k : ('x41 -> ('x42 -> 'x41)) |- 1 : int by T-Int{};
                    k : ('x41 -> ('x42 -> 'x41)) |- [] :  int list  by T-Nil{};
               };
          };
          k : ('x41 -> ('x42 -> 'x41)) |- 3 : int by T-Int{};
     };
};