 |- let s = (fun f -> (fun g -> (fun x -> ((f x) (g x))))) in let k1 = (fun x -> (fun y -> x)) in let k2 = (fun x -> (fun y -> x)) in (((s k1) k2) (fun x -> (x + 1))) : (int -> int) by T-Let{
      |-fun f -> (fun g -> (fun x -> ((f x) (g x)))) :  (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int))))  by T-Fun{
          f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) |-fun g -> (fun x -> ((f x) (g x))) :  (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))  by T-Fun{
               f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),g : ((int -> int) -> (bool -> (int -> int))) |-fun x -> ((f x) (g x)) :  ((int -> int) -> (int -> int))  by T-Fun{
                    f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),g : ((int -> int) -> (bool -> (int -> int))),x : (int -> int) |- (f x) (g x) :  (int -> int)  by T-App{
                         f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),g : ((int -> int) -> (bool -> (int -> int))),x : (int -> int) |- f x :  ((bool -> (int -> int)) -> (int -> int))  by T-App{
                              f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),g : ((int -> int) -> (bool -> (int -> int))),x : (int -> int) |- f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) by T-Var{};
                              f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),g : ((int -> int) -> (bool -> (int -> int))),x : (int -> int) |- x : (int -> int) by T-Var{};
                         };
                         f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),g : ((int -> int) -> (bool -> (int -> int))),x : (int -> int) |- g x :  (bool -> (int -> int))  by T-App{
                              f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),g : ((int -> int) -> (bool -> (int -> int))),x : (int -> int) |- g : ((int -> int) -> (bool -> (int -> int))) by T-Var{};
                              f : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),g : ((int -> int) -> (bool -> (int -> int))),x : (int -> int) |- x : (int -> int) by T-Var{};
                         };
                    };
               };
          };
     };
     s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))) |- let k1 = (fun x -> (fun y -> x)) in let k2 = (fun x -> (fun y -> x)) in (((s k1) k2) (fun x -> (x + 1))) : (int -> int) by T-Let{
          s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))) |-fun x -> (fun y -> x) :  ((int -> int) -> ((bool -> (int -> int)) -> (int -> int)))  by T-Fun{
               s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),x : (int -> int) |-fun y -> x :  ((bool -> (int -> int)) -> (int -> int))  by T-Fun{
                    s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),x : (int -> int),y : (bool -> (int -> int)) |- x : (int -> int) by T-Var{};
               };
          };
          s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) |- let k2 = (fun x -> (fun y -> x)) in (((s k1) k2) (fun x -> (x + 1))) : (int -> int) by T-Let{
               s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) |-fun x -> (fun y -> x) :  ((int -> int) -> (bool -> (int -> int)))  by T-Fun{
                    s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),x : (int -> int) |-fun y -> x :  (bool -> (int -> int))  by T-Fun{
                         s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),x : (int -> int),y : bool |- x : (int -> int) by T-Var{};
                    };
               };
               s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))) |- ((s k1) k2) (fun x -> (x + 1)) :  (int -> int)  by T-App{
                    s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))) |- (s k1) k2 :  ((int -> int) -> (int -> int))  by T-App{
                         s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))) |- s k1 :  (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))  by T-App{
                              s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))) |- s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))) by T-Var{};
                              s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))) |- k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) by T-Var{};
                         };
                         s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))) |- k2 : ((int -> int) -> (bool -> (int -> int))) by T-Var{};
                    };
                    s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))) |-fun x -> (x + 1) :  (int -> int)  by T-Fun{
                         s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))),x : int |- x + 1 : int by T-Plus{
                              s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))),x : int |- x : int by T-Var{};
                              s : (((int -> int) -> ((bool -> (int -> int)) -> (int -> int))) -> (((int -> int) -> (bool -> (int -> int))) -> ((int -> int) -> (int -> int)))),k1 : ((int -> int) -> ((bool -> (int -> int)) -> (int -> int))),k2 : ((int -> int) -> (bool -> (int -> int))),x : int |- 1 : int by T-Int{};
                         };
                    };
               };
          };
     };
};