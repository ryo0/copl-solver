 |-  let f = (fun x -> (fun y -> (x + y))) in (f 1 2 ) evalto 3 by E-Let { 
  |- (fun x -> (fun y -> (x + y))) evalto () [fun x -> (fun y -> (x + y))] by E-Fun{}; 
 f = () [fun x -> (fun y -> (x + y))] |- (f 1 2 ) evalto 3 by E-App { 
 f = () [fun x -> (fun y -> (x + y))] |- (f 1 ) evalto (x = 1) [fun y -> (x + y)] by E-App { 
 f = () [fun x -> (fun y -> (x + y))] |- f evalto () [fun x -> (fun y -> (x + y))] by E-Var1{}; 
 f = () [fun x -> (fun y -> (x + y))] |- 1 evalto 1 by E-Int{}; 
 x = 1 |- (fun y -> (x + y)) evalto (x = 1) [fun y -> (x + y)] by E-Fun{}; }; 
 f = () [fun x -> (fun y -> (x + y))] |- 2 evalto 2 by E-Int{}; 
 x = 1,y = 2 |- (x + y) evalto 3 by E-Plus{
x = 1,y = 2 |- x evalto 1 by E-Var2 {
x = 1 |- x evalto 1 by E-Var1{};};
x = 1,y = 2 |- y evalto 2 by E-Var1{};
1 plus 2 is 3 by B-Plus{};
};
 };
 };